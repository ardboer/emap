#!/usr/bin/env node

/* eslint-disable no-undef */
/**
 * Font Importer Script for EMAP Multi-Brand App
 *
 * This script:
 * 1. Scans and lists all available fonts in assets/fonts directory
 * 2. Updates utils/fontLoader.ts with font imports
 * 3. Updates iOS Info.plist with font references
 * 4. Provides configuration examples for brand configs
 */

const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

// Get current directory for CommonJS
const getCurrentDir = () => {
  return __dirname || process.cwd();
};

// ANSI color codes for terminal output
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  green: "\x1b[32m",
  blue: "\x1b[34m",
  yellow: "\x1b[33m",
  cyan: "\x1b[36m",
  magenta: "\x1b[35m",
  red: "\x1b[31m",
};

const FONTS_DIR = path.join(getCurrentDir(), "../assets/fonts");
const BRANDS_DIR = path.join(getCurrentDir(), "../brands");
const FONT_LOADER_PATH = path.join(getCurrentDir(), "../utils/fontLoader.ts");
const IOS_INFO_PLIST_PATH = path.join(
  getCurrentDir(),
  "../ios/emap/Info.plist"
);

/**
 * Extract font family name from filename
 */
function extractFontName(filename) {
  return filename.replace(/\.(ttf|otf)$/i, "");
}

/**
 * Get font weight from filename
 */
function getFontWeight(filename) {
  const lower = filename.toLowerCase();
  if (lower.includes("thin")) return "100";
  if (lower.includes("extralight") || lower.includes("ultralight"))
    return "200";
  if (lower.includes("light")) return "300";
  if (lower.includes("regular") || lower.includes("normal")) return "400";
  if (lower.includes("medium")) return "500";
  if (lower.includes("semibold") || lower.includes("demibold")) return "600";
  if (lower.includes("bold") && !lower.includes("extrabold")) return "700";
  if (lower.includes("extrabold") || lower.includes("ultrabold")) return "800";
  if (lower.includes("black") || lower.includes("heavy")) return "900";
  return "400";
}

/**
 * Get font style from filename
 */
function getFontStyle(filename) {
  const lower = filename.toLowerCase();
  if (lower.includes("italic") || lower.includes("oblique")) return "italic";
  return "normal";
}

/**
 * Scan fonts directory recursively
 */
function scanFonts() {
  if (!fs.existsSync(FONTS_DIR)) {
    console.error(
      `${colors.yellow}‚ö†Ô∏è  Fonts directory not found: ${FONTS_DIR}${colors.reset}`
    );
    return [];
  }

  const allFonts = [];

  /**
   * Recursively scan a directory for font files
   */
  function scanDirectory(dir, relativePath = "") {
    const items = fs.readdirSync(dir);

    items.forEach((item) => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        // Recursively scan subdirectories
        const newRelativePath = relativePath ? `${relativePath}/${item}` : item;
        scanDirectory(fullPath, newRelativePath);
      } else if (/\.(ttf|otf)$/i.test(item)) {
        // Found a font file
        const fontPath = relativePath ? `${relativePath}/${item}` : item;
        allFonts.push({
          filename: item,
          fontName: extractFontName(item),
          path: `../assets/fonts/${fontPath}`,
          weight: getFontWeight(item),
          style: getFontStyle(item),
          extension: path.extname(item).toLowerCase(),
          folder: relativePath || "(root)",
        });
      }
    });
  }

  scanDirectory(FONTS_DIR);
  return allFonts;
}

/**
 * Group fonts by family
 */
function groupFontsByFamily(fonts) {
  const families = {};

  fonts.forEach((font) => {
    const baseName = font.fontName
      .replace(
        /(Thin|ExtraLight|UltraLight|Light|Regular|Normal|Medium|SemiBold|DemiBold|Bold|ExtraBold|UltraBold|Black|Heavy|Italic|Oblique)/gi,
        ""
      )
      .replace(/[-_]/g, "")
      .trim();

    if (!families[baseName]) {
      families[baseName] = [];
    }
    families[baseName].push(font);
  });

  return families;
}

/**
 * Update utils/fontLoader.ts with font imports
 */
function updateFontLoader(fonts) {
  const fontImports = fonts
    .map((font) => {
      return `  '${font.fontName}': require('${font.path}'),`;
    })
    .join("\n");

  const content = `/**
 * Font Loader Utility
 * 
 * Automatically generated by scripts/font-importer.js
 * Do not edit this file manually - run the font importer script instead.
 * 
 * For native builds (iOS/Android), fonts are automatically linked by this script.
 */

/**
 * All available fonts
 * Fonts are automatically imported from assets/fonts/
 */
const fontFiles = {
${fontImports}
};

/**
 * Get all available fonts
 * @returns Object with font names as keys and require paths as values
 */
export function getAllFonts(): Record<string, any> {
  return fontFiles;
}

/**
 * Get font names for logging/debugging
 * @returns Array of available font names
 */
export function getAvailableFontNames(): string[] {
  return Object.keys(fontFiles);
}
`;

  fs.writeFileSync(FONT_LOADER_PATH, content, "utf8");
  return true;
}

/**
 * Update iOS Info.plist with font references
 */
function updateIOSInfoPlist(fonts) {
  if (!fs.existsSync(IOS_INFO_PLIST_PATH)) {
    console.log(
      `${colors.yellow}‚ö†Ô∏è  iOS Info.plist not found at: ${IOS_INFO_PLIST_PATH}${colors.reset}`
    );
    console.log(
      `${colors.yellow}   Skipping iOS configuration. Run this after setting up iOS project.${colors.reset}\n`
    );
    return false;
  }

  let plistContent = fs.readFileSync(IOS_INFO_PLIST_PATH, "utf8");

  // Remove existing UIAppFonts array if present
  plistContent = plistContent.replace(
    /<key>UIAppFonts<\/key>\s*<array>[\s\S]*?<\/array>/,
    ""
  );

  // Create new UIAppFonts array
  const fontEntries = fonts
    .map((font) => `\t\t<string>${font.filename}</string>`)
    .join("\n");

  const uiAppFonts = `\t<key>UIAppFonts</key>\n\t<array>\n${fontEntries}\n\t</array>`;

  // Insert before closing </dict>
  plistContent = plistContent.replace(
    /<\/dict>\s*<\/plist>/,
    `${uiAppFonts}\n</dict>\n</plist>`
  );

  fs.writeFileSync(IOS_INFO_PLIST_PATH, plistContent, "utf8");
  return true;
}

/**
 * Generate brand config examples
 */
function generateBrandConfigExamples(fontFamilies) {
  const examples = [];

  Object.keys(fontFamilies).forEach((family) => {
    const fonts = fontFamilies[family];
    const regularFont = fonts.find((f) => f.weight === "400") || fonts[0];

    examples.push({
      family,
      fontName: regularFont.fontName,
      config: {
        fonts: {
          primary: regularFont.fontName,
          secondary: "System",
        },
      },
    });
  });

  return examples;
}

/**
 * List all available brands
 */
function listBrands() {
  if (!fs.existsSync(BRANDS_DIR)) {
    return [];
  }

  return fs.readdirSync(BRANDS_DIR).filter((item) => {
    const itemPath = path.join(BRANDS_DIR, item);
    return (
      fs.statSync(itemPath).isDirectory() &&
      fs.existsSync(path.join(itemPath, "config.json"))
    );
  });
}

/**
 * Main execution
 */
function main() {
  console.log(
    `\n${colors.bright}${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}`
  );
  console.log(
    `${colors.bright}${colors.cyan}‚ïë        EMAP Font Importer & Configuration Tool            ‚ïë${colors.reset}`
  );
  console.log(
    `${colors.bright}${colors.cyan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}\n`
  );

  // Step 1: Scan fonts
  console.log(
    `${colors.bright}${colors.blue}üìÅ Step 1: Scanning fonts directory...${colors.reset}\n`
  );
  const fonts = scanFonts();

  if (fonts.length === 0) {
    console.log(
      `${colors.yellow}No font files found in ${FONTS_DIR}${colors.reset}`
    );
    console.log(
      `${colors.yellow}Please add your .ttf or .otf font files to this directory.${colors.reset}\n`
    );
    return;
  }

  console.log(
    `${colors.green}‚úì Found ${fonts.length} font file(s)${colors.reset}\n`
  );

  // Step 2: List all fonts
  console.log(
    `${colors.bright}${colors.blue}üìã Step 2: Available Fonts${colors.reset}\n`
  );
  const fontFamilies = groupFontsByFamily(fonts);

  Object.entries(fontFamilies).forEach(([family, familyFonts]) => {
    console.log(`${colors.bright}${colors.magenta}${family}${colors.reset}`);
    familyFonts.forEach((font) => {
      console.log(`  ${colors.cyan}‚îú‚îÄ${colors.reset} ${font.fontName}`);
      console.log(`  ${colors.cyan}‚îÇ${colors.reset}  File: ${font.filename}`);
      console.log(`  ${colors.cyan}‚îÇ${colors.reset}  Folder: ${font.folder}`);
      console.log(
        `  ${colors.cyan}‚îÇ${colors.reset}  Weight: ${font.weight}, Style: ${font.style}`
      );
    });
    console.log("");
  });

  // Step 3: Update font loader
  console.log(
    `${colors.bright}${colors.blue}‚öôÔ∏è  Step 3: Updating Font Loader${colors.reset}\n`
  );
  try {
    updateFontLoader(fonts);
    console.log(
      `${colors.green}‚úì Updated ${colors.cyan}utils/fontLoader.ts${colors.reset}`
    );
    console.log(
      `${colors.green}  All fonts are now imported and ready to use!${colors.reset}\n`
    );
  } catch (error) {
    console.log(
      `${colors.red}‚úó Failed to update font loader: ${error.message}${colors.reset}\n`
    );
  }

  // Step 4: Update iOS Info.plist
  console.log(
    `${colors.bright}${colors.blue}üì± Step 4: Updating iOS Configuration${colors.reset}\n`
  );
  try {
    const updated = updateIOSInfoPlist(fonts);
    if (updated) {
      console.log(
        `${colors.green}‚úì Updated ${colors.cyan}ios/emap/Info.plist${colors.reset}`
      );
      console.log(
        `${colors.green}  Fonts are now linked in the iOS project!${colors.reset}\n`
      );
    }
  } catch (error) {
    console.log(
      `${colors.red}‚úó Failed to update iOS Info.plist: ${error.message}${colors.reset}\n`
    );
  }

  // Step 5: Brand configuration examples
  console.log(
    `${colors.bright}${colors.blue}üè∑Ô∏è  Step 5: Brand Configuration${colors.reset}\n`
  );
  const brandExamples = generateBrandConfigExamples(fontFamilies);
  const brands = listBrands();

  console.log(
    `${colors.yellow}Update your brand config files with the font names:${colors.reset}\n`
  );

  brandExamples.forEach((example) => {
    console.log(
      `${colors.bright}${colors.magenta}For ${example.family} font family:${colors.reset}`
    );
    console.log(
      `${colors.cyan}File: brands/[brand-slug]/config.json${colors.reset}`
    );
    console.log(
      `${colors.green}${JSON.stringify(example.config, null, 2)}${
        colors.reset
      }\n`
    );
  });

  // Step 6: Current brands
  if (brands.length > 0) {
    console.log(
      `${colors.bright}${colors.blue}üè¢ Step 6: Your Current Brands${colors.reset}\n`
    );
    brands.forEach((brand) => {
      const configPath = path.join(BRANDS_DIR, brand, "config.json");
      const config = JSON.parse(fs.readFileSync(configPath, "utf8"));
      console.log(
        `${colors.bright}${colors.magenta}${brand.toUpperCase()}${colors.reset}`
      );
      console.log(
        `  Current font: ${colors.cyan}${config.fonts?.primary || "System"}${
          colors.reset
        }`
      );
      console.log(
        `  Config file: ${colors.yellow}brands/${brand}/config.json${colors.reset}\n`
      );
    });
  }

  // Step 7: Font name reference table
  console.log(
    `${colors.bright}${colors.blue}üìñ Step 7: Font Name Reference${colors.reset}\n`
  );
  console.log(
    `${colors.yellow}Use these EXACT names in your brand config files:${colors.reset}\n`
  );
  console.log(`‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`);
  console.log(
    `‚îÇ ${colors.bright}Font File Name${colors.reset}                ‚îÇ ${colors.bright}Use This Name${colors.reset}           ‚îÇ`
  );
  console.log(`‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§`);
  fonts.forEach((font) => {
    const fileName = font.filename.padEnd(30);
    const fontName = font.fontName.padEnd(20);
    console.log(
      `‚îÇ ${colors.cyan}${fileName}${colors.reset} ‚îÇ ${colors.green}${fontName}${colors.reset} ‚îÇ`
    );
  });
  console.log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n`);

  // Step 8: Next steps
  console.log(
    `${colors.bright}${colors.blue}üöÄ Step 8: Next Steps${colors.reset}\n`
  );
  console.log(
    `${colors.green}‚úì Fonts imported and configured!${colors.reset}\n`
  );
  console.log(`${colors.yellow}To use the fonts:${colors.reset}`);
  console.log(`  1. Update brand configs with desired font names`);
  console.log(
    `  2. Restart your development server: ${colors.cyan}npm start -- --clear${colors.reset}`
  );
  console.log(
    `  3. For iOS builds: ${colors.cyan}npx expo run:ios${colors.reset}\n`
  );

  console.log(
    `${colors.bright}${colors.green}‚ú® Font import complete!${colors.reset}\n`
  );
}

// Run the script
main();
